name: Check for freeze folder

on:
  pull_request_target:
    branches:
      - submission
    types: [opened, synchronize, reopened]

jobs:
  check_for_freeze_folder:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"

      - name: Install dependencies
        run: npm install @actions/core @actions/exec

      - name: Find qmd files
        id: qmd_files
        run: |
          QMD_FILES=$(find ./posts -name "*.qmd" | wc -l)
          echo "QMD_FILES=$QMD_FILES" >> $GITHUB_ENV

      - name: Check for freeze folder
        if: ${{ env.QMD_FILES != '0' }}
        run: |
          for file in ./posts/*.qmd; do
            FILE_NAME=$(basename "$file" .qmd)
            echo "$FILE_NAME"
            echo "_freeze/posts/$FILE_NAME" 
            echo "[ ! -d "./_freeze/posts/$FILE_NAME" ]"
            if [ ! -d "./_freeze/posts/$FILE_NAME" ]; then
              echo "GOING TO ERROR"
              echo "Render your challenge qmd file in posts folder to get freeze files" > pr_message.txt
              echo "success=false" >> $GITHUB_ENV
              echo "::error::Render your challenge qmd file in posts folder to get freeze files"
              break
            fi
          done
          if ${{ env.success == 'false' || !env.success }}; then
            echo "successVal=false" >> $GITHUB_ENV
          else
            echo "successVal=true" >> $GITHUB_ENV
          fi

      - name: Show environment variables
        run: env

      - name: Create a comment on the pull request
        if: ${{ env.successVal == 'false' || !env.successVal }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const exec = require("@actions/exec");
            const fs = require("fs");

            async function run() {
              const message = fs.readFileSync("pr_message.txt", "utf8");
              const { data: pullRequest } = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });
              const comment = `**Warning:** ${message}`;
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
              await github.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                assignees: [pullRequest.user.login],
              });
            }

            run();
